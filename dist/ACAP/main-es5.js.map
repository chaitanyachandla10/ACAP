{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/acap.service.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/dashboard/dashboard.component.ts","webpack:///src/app/dashboard/dashboard.component.html","webpack:///src/app/department/department.component.ts","webpack:///src/app/department/department.component.html","webpack:///src/app/manager/manager.component.ts","webpack:///src/app/manager/manager.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AcapService","httpClient","httpOptions","headers","console","log","get","data","post","JSON","stringify","subscribe","responseData","providedIn","routes","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","DashboardComponent","formBuilder","acapservice","getPeople","ItemsArray","manager","length","j","i","deveploertotal","testertotal","managertotal","sum","developer","tester","noofManager","alert","total","DepartmentComponent","submitted","departmentForm","group","departmentname","required","managername","numberOfManager","target","value","t","push","removeAt","invalid","addPerson","reset","clear","controls","f","onSubmit","onChangeTickets","onReset","onClear","ManagerComponent","environment","production","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { retry, catchError } from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AcapService {\n\n  constructor(private httpClient: HttpClient) { }\n\n  passon:any;\n  // Http Headers\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  }\n\n\n  getPeople(){\n    console.log(this.httpClient.get('http://localhost:3000/getdata'));\n    return this.httpClient.get('http://localhost:3000/getdata');\n  }\n  //http GET request end\n  \n    //http post request start\n    addPerson(data){\n      return this.httpClient.post('http://localhost:3000/datasend',JSON.stringify(data),this.httpOptions)\n      .subscribe( responseData => {\n        console.log(responseData);\n  \n      });\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'ACAP';\n}\n","<div class=\"container\">\n<div class=\"col-md-12\">\n   <app-department></app-department>\n<app-dashboard></app-dashboard>\n\n</div>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AcapService } from './acap.service';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { ManagerComponent } from './manager/manager.component';\nimport { DepartmentComponent } from './department/department.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n@NgModule({\n  declarations: [\n    AppComponent,\n    DashboardComponent,\n    ManagerComponent,\n    DepartmentComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule\n  ],\n  providers: [AcapService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder,FormGroup, FormGroupDirective, FormArray, Validators} from '@angular/forms';\nimport { AcapService } from '../acap.service';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\n\n  ItemsArray:any;\n  total:any;\n  constructor(private formBuilder: FormBuilder,private acapservice: AcapService) { }\n\n  ngOnInit(): void {\n     \n    this.acapservice.getPeople().subscribe((data: any[])=>{\n      console.log(data);\n      //console.log(Array.of(data));\n      //this.ItemsArray = Array.of(data);\n      this.ItemsArray = data;\n      console.log(this.ItemsArray.manager.length);\n      for(var j=0; j>=data.length; j++)\n      {\n        console.log(\"-----j-----\",j);\n        for(var i=0; i>=data[j].manager.length; i++)\n        {\n          var deveploertotal,testertotal,managertotal;\n          var sum;\n          deveploertotal = this.ItemsArray.manager[i].developer*1000;\n          testertotal = this.ItemsArray.manager[i].tester*500;\n          managertotal = this.ItemsArray.manager[i].noofManager*300;\n          sum = deveploertotal + testertotal + managertotal;\n          alert(sum);\n          console.log(sum);\n          this.total +=sum;\n          alert(this.total);\n          console.log(this.total);\n        }\n      }\n    })\n\n    }\n\n}\n","<div class=\"col-md-12\">\n    <h1 align=\"center\">Dashboard</h1>\n\n    <div class=\"col-md-12\">\n      <ul *ngFor=\"let item of ItemsArray;let i = index;\">\n            <li>{{item.departmentname}}</li>\n            <hr>\n            <li>{{item.Managername}}</li>\n            <ul *ngFor=\"let items of item.manager;\">\n                <hr>\n            <li>no of Developer <b>{{items.developer}}</b> = Total {{items.developer*1000}}</li>\n            <li> no of tester <b>{{items.tester}}</b> = Total {{items.tester*500}}</li>\n            <li> no of manager <b>{{items.noofManager}}</b> = Total {{items.noofManager*300}}</li>\n            <li>Total =&ensp;<b>{{ items.developer*1000+items.tester*500+items.noofManager*300 }}</b></li>\n            <hr>   \n            </ul>\n        <hr>\n        <li>Total  = </li>\n        </ul>\n\n        <table>\n            <tr>\n                <td>Each Developer</td>\n                <td>$1,000</td>\n            </tr>\n            <tr>\n                <td>Each QA Tester</td>\n                <td>$500</td>\n            </tr>\n            <tr>\n                <td>Each Manager</td>\n                <td>$300</td>\n            </tr>\n        </table>\n        <!--<table class=\"table table-hover table-responsive\">\n            <thead>\n                <th>Depart-name</th>\n                <th>ManagerName</th>\n                <th>\n                    <thead>\n                    <th>M |D | S</th>\n                </thead>\n                </th>\n            </thead>\n            <tbody *ngFor=\"let item of ItemsArray;let i = index;\">\n                <tr>\n                    <td>{{item.departmentname}}</td>\n                    <td>{{item.Managername}}</td>\n                    <td *ngFor=\"let items of item.manager;\">\n                        <tr>\n                        <td>{{items.developer}}</td>\n                        <td>{{items.tester}}</td>\n                        <td>{{items.noofManager}}</td>\n                        </tr>\n                    </td>\n                </tr>\n\n            </tbody>\n        </table>-->\n    </div>\n\n</div>","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder,FormGroup, FormGroupDirective, FormArray, Validators} from '@angular/forms';\nimport { AcapService } from '../acap.service';\n\n@Component({\n  selector: 'app-department',\n  templateUrl: './department.component.html',\n  styleUrls: ['./department.component.css']\n})\nexport class DepartmentComponent implements OnInit {\n  \n  departmentForm: FormGroup;\n  submitted = false;\n\n  constructor(private formBuilder: FormBuilder,private acapservice: AcapService) { }\n\n  ngOnInit(): void {\n        this.departmentForm = this.formBuilder.group({\n          departmentname:['', Validators.required],\n          managername:['', Validators.required],\n          numberOfManager: ['', Validators.required],\n          manager: new FormArray([])\n        });\n      }\n\n          // convenience getters for easy access to form fields\n    get f() { return this.departmentForm.controls; }\n    get t() { return this.f.manager as FormArray; }\n    onChangeTickets(e) {\n      const numberOfManager = e.target.value || 0;\n      if (this.t.length < numberOfManager) {\n          for (let i = this.t.length; i < numberOfManager; i++) {\n              this.t.push(this.formBuilder.group({\n                noofManager: ['', Validators.required],\n                developer: ['', Validators.required],\n                tester: ['', [Validators.required]]\n              }));\n          }\n      } else {\n          for (let i = this.t.length; i >= numberOfManager; i--) {\n              this.t.removeAt(i);\n          }\n      }\n  }\n\n    onSubmit() {\n      this.submitted = true;\n\n      // stop here if form is invalid\n      if (this.departmentForm.invalid) {\n          return;\n      }\n\n      // display form values on success\n      alert('SUCCESS!! :-)\\n\\n' + JSON.stringify(this.departmentForm.value, null, 4));\n      this.acapservice.addPerson(this.departmentForm.value)\n  }\n\n    onReset() {\n      // reset whole form back to initial state\n      this.submitted = false;\n      this.departmentForm.reset();\n      this.t.clear();\n  }\n\n  onClear() {\n      // clear errors and reset ticket fields\n      this.submitted = false;\n      this.t.reset();\n  }\n\n}\n","<div class=\"col-md-12\" align=\"center\">\n<form [formGroup]=\"departmentForm\" (ngSubmit)=\"onSubmit()\">\n    <div class=\"card m-3\">\n        <h5 class=\"card-header\">Create Department</h5>\n        <div class=\"card-body border-bottom\">\n            <div class=\"form-row\">\n                <div class=\"form-group\">\n                    <label>Department Name</label>\n                    <input type=\"text\" formControlName=\"departmentname\" style=\"box-shadow: 1px 1px 5px blue;color:black;\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.departmentname.errors }\" required/>\n                    <div *ngIf=\"submitted && f.departmentname.errors\" class=\"invalid-feedback\">\n                        <div *ngIf=\"f.departmentname.errors.required\">departmentname is required</div>\n                    </div>\n                  </div>\n            </div>\n            <div class=\"form-row\">\n                <div class=\"form-group\">\n                    <label>Manager Name</label>\n                    <input type=\"text\" formControlName=\"managername\" style=\"box-shadow: 1px 1px 5px blue;color:black;\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.managername.errors }\" required/>\n                    <div *ngIf=\"submitted && f.managername.errors\" class=\"invalid-feedback\">\n                        <div *ngIf=\"f.managername.errors.required\">manager is required</div>\n                    </div>\n                  </div>\n            </div>\n                <div class=\"form-row\">\n                    <div class=\"form-group\">\n                        <label>Add manager</label>\n                        <select formControlName=\"numberOfManager\" class=\"form-control\" (change)=\"onChangeTickets($event)\" [ngClass]=\"{ 'is-invalid': submitted && f.numberOfTickets.errors }\">\n                            <option value=\"\"></option>\n                            <option *ngFor=\"let i of [1,2,3,4,5,6,7,8,9,10]\">{{i}}</option>\n                        </select>\n                        <div *ngIf=\"submitted && f.numberOfManager.errors\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f.numberOfManager.errors.required\">Number of manager is required</div>\n                        </div>\n                    </div>\n            </div>\n        </div>\n        <div *ngFor=\"let manager of t.controls; let i = index\" class=\"list-group list-group-flush\">\n            <div class=\"list-group-item\">\n                <h5 class=\"card-title\">manager {{i + 1}}</h5>\n                <div [formGroup]=\"manager\" class=\"form-row\">\n                    <div class=\"form-group col-4\">\n                        <label>Add manager</label>\n                        <select formControlName=\"noofManager\" class=\"form-control\"  [ngClass]=\"{ 'is-invalid': submitted && f.noofManager.errors }\">\n                            <option value=\"\"></option>\n                            <option *ngFor=\"let i of [1,2,3,4,5,6,7,8,9,10]\">{{i}}</option>\n                        </select>\n                        <div *ngIf=\"submitted && f.noofManager.errors\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f.noofManager.errors.required\">Number of manager is required</div>\n                        </div>\n                    </div>\n                    <div class=\"form-group col-4\">\n                        <label>Developer</label>\n                        <select formControlName=\"developer\" class=\"form-control\"  [ngClass]=\"{ 'is-invalid': submitted && f.developer.errors }\">\n                            <option value=\"\"></option>\n                            <option *ngFor=\"let j of [1,2,3,4,5,6,7,8,9,10]\">{{j}}</option>\n                        </select>\n                        <div *ngIf=\"submitted && f.developer.errors\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f.developer.errors.required\">Number of Developer is required</div>\n                        </div>\n                    </div>\n                    <div class=\"form-group col-4\">\n                        <label>QA Tester</label>\n                        <select formControlName=\"tester\" class=\"form-control\"  [ngClass]=\"{ 'is-invalid': submitted && f.tester.errors }\">\n                            <option value=\"\"></option>\n                            <option *ngFor=\"let k of [1,2,3,4,5,6,7,8,9,10]\">{{k}}</option>\n                        </select>\n                        <div *ngIf=\"submitted && f.tester.errors\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f.tester.errors.required\">Number of Tester is required</div>\n                        </div>\n\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"card-footer text-center border-top-0\">\n            <button class=\"btn btn-primary mr-1\">SUbmit</button>\n            <button class=\"btn btn-secondary mr-1\" type=\"reset\" (click)=\"onReset()\">Reset</button>\n            <button class=\"btn btn-secondary\" type=\"button\" (click)=\"onClear()\">Clear</button>\n        </div>\n    </div>\n</form>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-manager',\n  templateUrl: './manager.component.html',\n  styleUrls: ['./manager.component.css']\n})\nexport class ManagerComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>manager works!</p>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}